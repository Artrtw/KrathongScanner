using System;
using UnityEngine;
using System.IO;
using System.Collections;
using System.Collections.Generic;

public class ImageLoader : MonoBehaviour
{
    public string folderPath;
    public float Countloop = 3;
    public float checkInterval = 2f;         // ‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
    public float spawnCooldown = 5f;         // CD ‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å (‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà)
    public float queueSpawnCooldown = 8f;    // CD ‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≠‡∏á (‡∏ß‡∏ô‡∏Ñ‡∏¥‡∏ß 3 ‡∏≠‡∏±‡∏ô)
    public float krathongLifeTime = 15f;     // ‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏∞‡∏ó‡∏á (‡∏´‡∏•‡∏±‡∏Å + ‡∏£‡∏≠‡∏á)

    private HashSet<string> loadedFiles = new HashSet<string>();
    private Queue<string> spawnQueue = new Queue<string>();   // ‡∏Ñ‡∏¥‡∏ß‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å
    private List<string> lastFiles = new List<string>();      // ‡πÄ‡∏Å‡πá‡∏ö 3 ‡∏≠‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    private int queueIndex = 0;

    private bool isMainSpawning = false;     // ‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á spawn ‡∏≠‡∏¢‡∏π‡πà

    void Start()
    {
        StartCoroutine(CheckFolderLoop());   // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
        StartCoroutine(SpawnLoop());         // ‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å
        StartCoroutine(QueueSpawnLoop());    // ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≠‡∏á
    }
    public void SetFolderPath(string path)
    {
        folderPath = path;
        Debug.Log("ImageLoader ‡πÉ‡∏ä‡πâ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà: " + folderPath);
    }

    // üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
    IEnumerator CheckFolderLoop()
    {
        while (true)
        {
            string[] files = Directory.GetFiles(folderPath, "*.png");

            // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç (‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏ó‡πâ‡∏≤‡∏¢)
            Array.Sort(files, (a, b) => File.GetLastWriteTime(a).CompareTo(File.GetLastWriteTime(b)));

            foreach (string filePath in files)
            {
                if (!loadedFiles.Contains(filePath))
                {
                    Debug.Log("‡∏û‡∏ö‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà: " + filePath);
                    loadedFiles.Add(filePath);

                    // ‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å
                    spawnQueue.Enqueue(filePath);

                    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≠‡∏á (‡πÄ‡∏Å‡πá‡∏ö 3 ‡πÑ‡∏ü‡∏•‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
                    if (lastFiles.Count >= Countloop)
                        lastFiles.RemoveAt(0);
                    lastFiles.Add(filePath);
                }
            }

            yield return new WaitForSeconds(checkInterval);
        }
    }

    // üîπ Spawn ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà (‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å)
    IEnumerator SpawnLoop()
    {
        while (true)
        {
            if (spawnQueue.Count > 0)
            {
                isMainSpawning = true; // ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏° spawn ‡∏´‡∏•‡∏±‡∏Å

                string filePath = spawnQueue.Dequeue();
                SpawnKratong(filePath, "Kratong"); // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠ Krathong

                yield return new WaitForSeconds(spawnCooldown);

                isMainSpawning = false; // ‚úÖ ‡∏à‡∏ö‡∏Å‡∏≤‡∏£ spawn ‡∏´‡∏•‡∏±‡∏Å
            }
            else
            {
                yield return new WaitForSeconds(0.5f);
            }
        }
    }

    // üîπ ‡∏ß‡∏ô spawn ‡∏à‡∏≤‡∏Å 3 ‡∏≠‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≠‡∏á)
    IEnumerator QueueSpawnLoop()
    {
        // ‚úÖ ‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠‡∏Å‡πà‡∏≠‡∏ô 1 ‡∏£‡∏≠‡∏ö
        yield return new WaitForSeconds(queueSpawnCooldown);

        while (true)
        {
            // ‚úÖ ‡∏£‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏•‡∏±‡∏Å‡∏à‡∏∞‡∏ß‡πà‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡πà‡∏≠‡∏¢ spawn
            while (isMainSpawning)
                yield return null;

            if (lastFiles.Count > 0)
            {
                string filePath = lastFiles[queueIndex % lastFiles.Count];
                queueIndex++;

                SpawnKratong(filePath, "KratongLoop"); // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠ KrathongLoop
            }

            // ‚úÖ ‡∏£‡∏≠ cooldown ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô spawn ‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà
            yield return new WaitForSeconds(queueSpawnCooldown);
        }
    }

    // ================= Helper =================
    void SpawnKratong(string filePath, string objectName)
    {
        Texture2D tex = LoadTexture(filePath);
        if (tex != null)
        {
            Sprite sprite = ConvertToSprite(tex);
            GameObject obj = CreatePrefabFromSprite(sprite, objectName);

            // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á (‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢)
            obj.transform.position = new Vector3(
                UnityEngine.Random.Range(-3f, 3f),
                UnityEngine.Random.Range(-2f, 2f),
                0
            );

            // ‚úÖ ‡∏ó‡∏≥‡∏•‡∏≤‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
            Destroy(obj, krathongLifeTime);

            StartCoroutine(FloatAnimation(obj));
        }
    }

    Texture2D LoadTexture(string filePath)
    {
        try
        {
            if (File.Exists(filePath))
            {
                byte[] fileData = File.ReadAllBytes(filePath);
                Texture2D tex = new Texture2D(2, 2);
                tex.LoadImage(fileData);
                return tex;
            }
        }
        catch (IOException)
        {
            Debug.LogWarning("‡πÑ‡∏ü‡∏•‡πå‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°: " + filePath);
        }
        return null;
    }

    Sprite ConvertToSprite(Texture2D texture)
    {
        return Sprite.Create(
            texture,
            new Rect(0, 0, texture.width, texture.height),
            new Vector2(0.5f, 0.5f),
            100f
        );
    }

    GameObject CreatePrefabFromSprite(Sprite sprite, string objectName)
    {
        GameObject obj = new GameObject(objectName);

        // SpriteRenderer
        SpriteRenderer sr = obj.AddComponent<SpriteRenderer>();
        sr.sprite = sprite;
        sr.sortingOrder = 5;

        // Collider2D
        BoxCollider2D collider = obj.AddComponent<BoxCollider2D>();
        collider.isTrigger = false;

        // Animator
        Animator animator = obj.AddComponent<Animator>();
        animator.runtimeAnimatorController = Resources.Load<RuntimeAnimatorController>("KratongController");

        // Scale
        obj.transform.localScale = new Vector3(35f, 35f, 18f);

        return obj;
    }

    IEnumerator FloatAnimation(GameObject obj)
    {
        Vector3 startPos = obj.transform.position;

        while (obj != null)
        {
            obj.transform.position = startPos + new Vector3(0, Mathf.Sin(Time.time) * 0.2f, 0);
            yield return null;
        }
    }
}
